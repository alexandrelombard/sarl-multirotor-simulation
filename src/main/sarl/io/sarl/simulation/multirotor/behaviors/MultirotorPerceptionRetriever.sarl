/** 
 * 
 */
package io.sarl.simulation.multirotor.behaviors

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Logging
import io.sarl.lang.core.Address
import io.sarl.simulation.capacities.AgentBodyAffectationCapacity
import io.sarl.simulation.events.PerceptionsPropagated
import io.sarl.simulation.events.RetrievePerceptions
import io.sarl.simulation.multirotor.capacities.MultirotorSimulationPerceptionCapacity
import io.sarl.simulation.capacities.PropagatePerceptionsCapacity
import io.sarl.simulation.multirotor.perceptions.MultirotorStatePerception
import io.sarl.simulation.multirotor.perceptions.PosePerception
import io.sarl.simulation.multirotor.perceptions.GroundTruthKinematicsPerception

/** 
 * Perception retriever behavior
 * @author Alexandre Lombard
 * 
 */
behavior MultirotorPerceptionRetriever {
	uses Logging, DefaultContextInteractions

	uses AgentBodyAffectationCapacity
	uses MultirotorSimulationPerceptionCapacity
	uses PropagatePerceptionsCapacity
	
	on RetrievePerceptions {
		retrievePerceptions
	}

	/** Retrieve the perceptions for a single agent
	 */
	def retrieveAgentPerceptions(address : Address, name : String) {
		val state = name.multirotorState
		val pose = name.getObjectPose
		val kinematics = name.getGroundTruthKinematics

		propagatePerception(address) [
			emit(new MultirotorStatePerception(state))[it == address]
			emit(new PosePerception(pose))[it == address]
			emit(new GroundTruthKinematicsPerception(kinematics))[it == address]
		]
	}
	
	/** Retrieve the perceptions for all agents
	 */
	private def retrievePerceptions {
		info("Retrieving perceptions for agents...")
		
		affectedBodies.forEach[address, name|retrieveAgentPerceptions(address, name)]
		
		emit(new PerceptionsPropagated)
	}
	
}
